name: CI

on:
  workflow_dispatch:

env:
  ANDROID_NDK_VERSION: r25b
  NODE_TARGETS_DEFAULT: '12.0.0 14.0.0 16.0.0 18.0.0 19.0.0'
  NODE_TARGETS_FREEBSD: '14.0.0 16.0.0 17.0.1'
  ELECTRON_TARGETS_DEFAULT: '21.0.0'
  ELECTRON_TARGETS_FREEBSD: '16.0.0'

jobs:
  publish-prod:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs:
      - package-windows
      - package-windows-sfx
      - package-macos
      - package-linux
      - package-ios
      - package-watchos
      - package-tvos
      - package-android
      - package-freebsd
      - package-qnx
      - package-apple-universal
      - assemble-ios-assets
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Set up environment
        uses: ./.github/actions/setup-linux-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro
          sudo npm install -g cloudflare-cli
      - name: Download release assets
        uses: actions/download-artifact@v3
        with:
          name: release-assets
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for Windows/x86
        uses: actions/download-artifact@v3
        with:
          name: frida-node-windows-x86
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for Windows/x86_64
        uses: actions/download-artifact@v3
        with:
          name: frida-node-windows-x86_64
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for macOS/x86_64
        uses: actions/download-artifact@v3
        with:
          name: frida-node-macos-x86_64
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for macOS/arm64
        uses: actions/download-artifact@v3
        with:
          name: frida-node-macos-arm64
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for Linux/x86
        uses: actions/download-artifact@v3
        with:
          name: frida-node-linux-x86
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for Linux/x86_64
        uses: actions/download-artifact@v3
        with:
          name: frida-node-linux-x86_64
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for Linux/armhf
        uses: actions/download-artifact@v3
        with:
          name: frida-node-linux-armhf
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for Linux/arm64
        uses: actions/download-artifact@v3
        with:
          name: frida-node-linux-arm64
          path: build/release-assets/
      - name: Download Node.js and Electron prebuilds for FreeBSD/arm64
        uses: actions/download-artifact@v3
        with:
          name: frida-node-freebsd-arm64
          path: build/release-assets/
      - name: Package iOS assets
        uses: ./.github/actions/package-ios-assets
      - name: Package Cirrus CI artifacts
        run: releng/package-cirrus-ci-artifacts.sh ${{ github.sha }}
      - name: Rename release assets
        run: releng/rename-release-assets.sh
      - name: Publish release to GitHub
        uses: softprops/action-gh-release@v1
        with:
          name: "Frida ${{ env.FRIDA_VERSION }}"
          body: "See https://frida.re/news/ for details."
          files: build/release-assets/*
      - name: Publish Python bindings to PyPI
        uses: ./.github/actions/publish-python-bindings
        with:
          site: production
          pypi-token: ${{ secrets.PYPI_API_TOKEN }}
          testpypi-token: ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Publish iOS .debs
        uses: ./.github/actions/publish-ios-debs
        with:
          site: production
      - name: Publish Node.js bindings to npm
        run: |
          cd frida-node
          npm version $FRIDA_VERSION
          mkdir prebuilds
          cp ../build/release-assets/frida-*-node-*-linux-x64.tar.gz prebuilds/
          npm install
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish frida-gadget-ios to npm
        run: |
          cd releng/modules/frida-gadget-ios
          npm version $FRIDA_VERSION
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Trigger magisk-frida CI
        run: |
          curl \
              -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.MAGISK_FRIDA_TOKEN }}" \
              https://api.github.com/repos/ViRb3/magisk-frida/dispatches \
              -d '{"event_type":"build"}'

  publish-dev:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - frida-windows
      - frida-macos
      - frida-linux
      - frida-freebsd
      - assemble-ios-assets
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
      - name: Set up environment
        uses: ./.github/actions/setup-linux-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y reprepro
          sudo npm install -g cloudflare-cli
      - name: Package iOS assets
        uses: ./.github/actions/package-ios-assets
      - name: Publish Python bindings to TestPyPI
        uses: ./.github/actions/publish-python-bindings
        with:
          site: development
          pypi-token: ${{ secrets.PYPI_API_TOKEN }}
          testpypi-token: ${{ secrets.TEST_PYPI_API_TOKEN }}
      - name: Publish iOS .debs
        uses: ./.github/actions/publish-ios-debs
        with:
          site: development

  package-android:
    if: startsWith(github.ref, 'refs/tags/')
    needs: frida-android
    strategy:
      matrix:
        arch: [x86, x86_64, arm, arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Package Gum devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: frida-gum-devkit-android-${{ matrix.arch }}
      - name: Package GumJS devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: frida-gumjs-devkit-android-${{ matrix.arch }}
      - name: Package Core devkit
        uses: ./.github/actions/package-artifact-files-as-tarball
        with:
          name: frida-core-devkit-android-${{ matrix.arch }}
      - name: Package frida-server
        uses: ./.github/actions/package-artifact-file
        with:
          name: frida-server-android-${{ matrix.arch }}
      - name: Package frida-portal
        uses: ./.github/actions/package-artifact-file
        with:
          name: frida-portal-android-${{ matrix.arch }}
      - name: Package frida-gadget
        uses: ./.github/actions/package-artifact-file
        with:
          name: frida-gadget-android-${{ matrix.arch }}
      - name: Package frida-inject
        uses: ./.github/actions/package-artifact-file
        with:
          name: frida-inject-android-${{ matrix.arch }}

  sdk-android-32:
    needs: toolchain-linux
    strategy:
      matrix:
        arch: [x86, arm]
      fail-fast: false
    runs-on: ubuntu-latest
    container: ghcr.io/frida/x-tools-linux-x86:latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-linux-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Set up NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ env.ANDROID_NDK_VERSION }}
          add-to-path: false
      - name: Roll SDK
        run: |
          export \
              CC_FOR_BUILD=$CC \
              CXX_FOR_BUILD=$CXX \
              AS_FOR_BUILD=$AS \
              LD_FOR_BUILD=$LD \
              AR_FOR_BUILD=$AR \
              NM_FOR_BUILD=$NM \
              RANLIB_FOR_BUILD=$RANLIB \
              STRIP_FOR_BUILD=$STRIP \
              READELF_FOR_BUILD=$READELF \
              OBJCOPY_FOR_BUILD=$OBJCOPY \
              OBJDUMP_FOR_BUILD=$OBJDUMP
          unset CC CXX AS LD AR NM RANLIB STRIP READELF OBJCOPY OBJDUMP
          releng/deps.py roll sdk android-${{ matrix.arch }} --activate
        env:
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
          FRIDA_BUILD_ARCH: x86

  sdk-android-64:
    needs: toolchain-linux
    strategy:
      matrix:
        arch: [x86_64, arm64]
      fail-fast: false
    runs-on: ubuntu-latest
    container: ghcr.io/frida/x-tools-linux-x86_64:latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up environment
        uses: ./.github/actions/setup-linux-env
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_KEY }}
          cloudflare-email: ${{ secrets.CF_EMAIL }}
          cloudflare-token: ${{ secrets.CF_TOKEN }}
      - name: Set up NDK
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: ${{ env.ANDROID_NDK_VERSION }}
          add-to-path: false
      - name: Roll SDK
        run: |
          export \
              CC_FOR_BUILD=$CC \
              CXX_FOR_BUILD=$CXX \
              AS_FOR_BUILD=$AS \
              LD_FOR_BUILD=$LD \
              AR_FOR_BUILD=$AR \
              NM_FOR_BUILD=$NM \
              RANLIB_FOR_BUILD=$RANLIB \
              STRIP_FOR_BUILD=$STRIP \
              READELF_FOR_BUILD=$READELF \
              OBJCOPY_FOR_BUILD=$OBJCOPY \
              OBJDUMP_FOR_BUILD=$OBJDUMP
          unset CC CXX AS LD AR NM RANLIB STRIP READELF OBJCOPY OBJDUMP
          releng/deps.py roll sdk android-${{ matrix.arch }} --activate
        env:
          ANDROID_NDK_ROOT: ${{ steps.setup-ndk.outputs.ndk-path }}
